/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddShortUrlRequest extends $tea.Model {
    effectiveDays?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    shortUrlName?: string;
    sourceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShortUrlResponseBody extends $tea.Model {
    code?: string;
    data?: AddShortUrlResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShortUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddShortUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSmsSignRequest extends $tea.Model {
    ownerId?: number;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signFileList?: AddSmsSignRequestSignFileList[];
    signName?: string;
    signSource?: number;
    signType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSmsSignResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSmsSignResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddSmsSignResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSmsTemplateRequest extends $tea.Model {
    ownerId?: number;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateContent?: string;
    templateName?: string;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSmsTemplateResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddSmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckMobilesCardSupportRequest extends $tea.Model {
    mobiles?: {
        [key: string]: any;
    }[];
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckMobilesCardSupportResponseBody extends $tea.Model {
    code?: string;
    data?: CheckMobilesCardSupportResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckMobilesCardSupportResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CheckMobilesCardSupportResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversionDataIntlRequest extends $tea.Model {
    conversionRate?: string;
    ownerId?: number;
    reportTime?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversionDataIntlResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConversionDataIntlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ConversionDataIntlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardSmsTemplateRequest extends $tea.Model {
    factorys?: string;
    memo?: string;
    template?: {
        [key: string]: any;
    };
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardSmsTemplateShrinkRequest extends $tea.Model {
    factorys?: string;
    memo?: string;
    templateShrink?: string;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardSmsTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: CreateCardSmsTemplateResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardSmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCardSmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmartShortUrlRequest extends $tea.Model {
    outId?: string;
    ownerId?: number;
    phoneNumbers?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    sourceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmartShortUrlResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    model?: CreateSmartShortUrlResponseBodyModel[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmartShortUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSmartShortUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmsSignRequest extends $tea.Model {
    applySceneContent?: string;
    moreData?: string[];
    ownerId?: number;
    qualificationId?: number;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    signSource?: number;
    signType?: number;
    thirdParty?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmsSignShrinkRequest extends $tea.Model {
    applySceneContent?: string;
    moreDataShrink?: string;
    ownerId?: number;
    qualificationId?: number;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    signSource?: number;
    signType?: number;
    thirdParty?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmsSignResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    orderId?: string;
    requestId?: string;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmsSignResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSmsSignResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmsTemplateRequest extends $tea.Model {
    applySceneContent?: string;
    intlType?: number;
    moreData?: string[];
    ownerId?: number;
    relatedSignName?: string;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateContent?: string;
    templateName?: string;
    templateRule?: string;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmsTemplateShrinkRequest extends $tea.Model {
    applySceneContent?: string;
    intlType?: number;
    moreDataShrink?: string;
    ownerId?: number;
    relatedSignName?: string;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateContent?: string;
    templateName?: string;
    templateRule?: string;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmsTemplateResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    orderId?: string;
    requestId?: string;
    templateCode?: string;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShortUrlRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    sourceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShortUrlResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteShortUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteShortUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSmsSignRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSmsSignResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSmsSignResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteSmsSignResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSmsTemplateRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSmsTemplateResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteSmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardSmsLinkRequest extends $tea.Model {
    cardCodeType?: number;
    cardLinkType?: number;
    cardTemplateCode?: string;
    cardTemplateParamJson?: string;
    customShortCodeJson?: string;
    domain?: string;
    outId?: string;
    phoneNumberJson?: string;
    signNameJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardSmsLinkResponseBody extends $tea.Model {
    code?: string;
    data?: GetCardSmsLinkResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardSmsLinkResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCardSmsLinkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaResourceIdRequest extends $tea.Model {
    extendInfo?: string;
    fileSize?: number;
    memo?: string;
    ossKey?: string;
    resourceType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaResourceIdResponseBody extends $tea.Model {
    code?: string;
    data?: GetMediaResourceIdResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaResourceIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMediaResourceIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOSSInfoForCardTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: GetOSSInfoForCardTemplateResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOSSInfoForCardTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOSSInfoForCardTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOSSInfoForUploadFileRequest extends $tea.Model {
    bizType?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOSSInfoForUploadFileResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    model?: GetOSSInfoForUploadFileResponseBodyModel;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOSSInfoForUploadFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOSSInfoForUploadFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsSignRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsSignResponseBody extends $tea.Model {
    applyScene?: string;
    auditInfo?: GetSmsSignResponseBodyAuditInfo;
    code?: string;
    createDate?: string;
    fileUrlList?: string[];
    message?: string;
    orderId?: string;
    qualificationId?: number;
    remark?: string;
    requestId?: string;
    signCode?: string;
    signName?: string;
    signStatus?: number;
    signTag?: string;
    signUsage?: string;
    thirdParty?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsSignResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSmsSignResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsTemplateRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsTemplateResponseBody extends $tea.Model {
    applyScene?: string;
    auditInfo?: GetSmsTemplateResponseBodyAuditInfo;
    code?: string;
    createDate?: string;
    fileUrlList?: GetSmsTemplateResponseBodyFileUrlList;
    intlType?: number;
    message?: string;
    moreDataFileUrlList?: GetSmsTemplateResponseBodyMoreDataFileUrlList;
    orderId?: string;
    relatedSignName?: string;
    remark?: string;
    requestId?: string;
    templateCode?: string;
    templateContent?: string;
    templateName?: string;
    templateStatus?: string;
    templateTag?: number;
    templateType?: string;
    variableAttribute?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequest extends $tea.Model {
    nextToken?: string;
    ownerId?: number;
    pageSize?: number;
    prodCode?: string;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tag?: ListTagResourcesRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBody extends $tea.Model {
    code?: string;
    nextToken?: string;
    requestId?: string;
    tagResources?: ListTagResourcesResponseBodyTagResources;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListTagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySmsSignRequest extends $tea.Model {
    ownerId?: number;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signFileList?: ModifySmsSignRequestSignFileList[];
    signName?: string;
    signSource?: number;
    signType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySmsSignResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySmsSignResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifySmsSignResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySmsTemplateRequest extends $tea.Model {
    ownerId?: number;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateCode?: string;
    templateContent?: string;
    templateName?: string;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySmsTemplateResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifySmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardSmsTemplateRequest extends $tea.Model {
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardSmsTemplateResponseBody extends $tea.Model {
    code?: string;
    data?: QueryCardSmsTemplateResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardSmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCardSmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardSmsTemplateReportRequest extends $tea.Model {
    endDate?: string;
    startDate?: string;
    templateCodes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardSmsTemplateReportResponseBody extends $tea.Model {
    code?: string;
    data?: QueryCardSmsTemplateReportResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardSmsTemplateReportResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCardSmsTemplateReportResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMobilesCardSupportRequest extends $tea.Model {
    mobiles?: {
        [key: string]: any;
    }[];
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMobilesCardSupportShrinkRequest extends $tea.Model {
    mobilesShrink?: string;
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMobilesCardSupportResponseBody extends $tea.Model {
    code?: string;
    data?: QueryMobilesCardSupportResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMobilesCardSupportResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMobilesCardSupportResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageSmartShortUrlLogRequest extends $tea.Model {
    createDateEnd?: number;
    createDateStart?: number;
    ownerId?: number;
    pageNo?: number;
    pageSize?: number;
    phoneNumber?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    shortUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageSmartShortUrlLogResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    model?: QueryPageSmartShortUrlLogResponseBodyModel;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageSmartShortUrlLogResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPageSmartShortUrlLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendDetailsRequest extends $tea.Model {
    bizId?: string;
    currentPage?: number;
    ownerId?: number;
    pageSize?: number;
    phoneNumber?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    sendDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendDetailsResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    smsSendDetailDTOs?: QuerySendDetailsResponseBodySmsSendDetailDTOs;
    totalCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendDetailsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySendDetailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendStatisticsRequest extends $tea.Model {
    endDate?: string;
    isGlobe?: number;
    ownerId?: number;
    pageIndex?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    startDate?: string;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendStatisticsResponseBody extends $tea.Model {
    code?: string;
    data?: QuerySendStatisticsResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendStatisticsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySendStatisticsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShortUrlRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    shortUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShortUrlResponseBody extends $tea.Model {
    code?: string;
    data?: QueryShortUrlResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShortUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryShortUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsSignRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsSignResponseBody extends $tea.Model {
    code?: string;
    createDate?: string;
    message?: string;
    reason?: string;
    requestId?: string;
    signName?: string;
    signStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsSignResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySmsSignResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsSignListRequest extends $tea.Model {
    ownerId?: number;
    pageIndex?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsSignListResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    message?: string;
    pageSize?: number;
    requestId?: string;
    smsSignList?: QuerySmsSignListResponseBodySmsSignList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsSignListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySmsSignListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsTemplateRequest extends $tea.Model {
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsTemplateResponseBody extends $tea.Model {
    code?: string;
    createDate?: string;
    message?: string;
    reason?: string;
    requestId?: string;
    templateCode?: string;
    templateContent?: string;
    templateName?: string;
    templateStatus?: number;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsTemplateListRequest extends $tea.Model {
    ownerId?: number;
    pageIndex?: number;
    pageSize?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsTemplateListResponseBody extends $tea.Model {
    code?: string;
    currentPage?: number;
    message?: string;
    pageSize?: number;
    requestId?: string;
    smsTemplateList?: QuerySmsTemplateListResponseBodySmsTemplateList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsTemplateListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySmsTemplateListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBatchCardSmsRequest extends $tea.Model {
    cardTemplateCode?: string;
    cardTemplateParamJson?: string;
    digitalTemplateCode?: string;
    digitalTemplateParamJson?: string;
    fallbackType?: string;
    outId?: string;
    phoneNumberJson?: string;
    signNameJson?: string;
    smsTemplateCode?: string;
    smsTemplateParamJson?: string;
    smsUpExtendCodeJson?: string;
    templateCode?: string;
    templateParamJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBatchCardSmsResponseBody extends $tea.Model {
    code?: string;
    data?: SendBatchCardSmsResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBatchCardSmsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendBatchCardSmsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBatchSmsRequest extends $tea.Model {
    outId?: string;
    ownerId?: number;
    phoneNumberJson?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signNameJson?: string;
    smsUpExtendCodeJson?: string;
    templateCode?: string;
    templateParamJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBatchSmsResponseBody extends $tea.Model {
    bizId?: string;
    code?: string;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBatchSmsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendBatchSmsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardSmsRequest extends $tea.Model {
    cardObjects?: SendCardSmsRequestCardObjects[];
    cardTemplateCode?: string;
    digitalTemplateCode?: string;
    digitalTemplateParam?: string;
    fallbackType?: string;
    outId?: string;
    signName?: string;
    smsTemplateCode?: string;
    smsTemplateParam?: string;
    smsUpExtendCode?: string;
    templateCode?: string;
    templateParam?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardSmsResponseBody extends $tea.Model {
    code?: string;
    data?: SendCardSmsResponseBodyData;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardSmsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendCardSmsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSmsRequest extends $tea.Model {
    outId?: string;
    ownerId?: number;
    phoneNumbers?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    smsUpExtendCode?: string;
    templateCode?: string;
    templateParam?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSmsResponseBody extends $tea.Model {
    bizId?: string;
    code?: string;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSmsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendSmsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmsConversionIntlRequest extends $tea.Model {
    conversionTime?: number;
    delivered?: boolean;
    messageId?: string;
    ownerId?: number;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmsConversionIntlResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmsConversionIntlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SmsConversionIntlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequest extends $tea.Model {
    ownerId?: number;
    prodCode?: string;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tag?: TagResourcesRequestTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesRequest extends $tea.Model {
    all?: boolean;
    ownerId?: number;
    prodCode?: string;
    regionId?: string;
    resourceId?: string[];
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    resourceType?: string;
    tagKey?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponseBody extends $tea.Model {
    code?: string;
    data?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UntagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSmsSignRequest extends $tea.Model {
    applySceneContent?: string;
    moreData?: string[];
    ownerId?: number;
    qualificationId?: number;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    signSource?: number;
    signType?: number;
    thirdParty?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSmsSignShrinkRequest extends $tea.Model {
    applySceneContent?: string;
    moreDataShrink?: string;
    ownerId?: number;
    qualificationId?: number;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    signName?: string;
    signSource?: number;
    signType?: number;
    thirdParty?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSmsSignResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    orderId?: string;
    requestId?: string;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSmsSignResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateSmsSignResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSmsTemplateRequest extends $tea.Model {
    applySceneContent?: string;
    intlType?: number;
    moreData?: string[];
    ownerId?: number;
    relatedSignName?: string;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateCode?: string;
    templateContent?: string;
    templateName?: string;
    templateRule?: string;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSmsTemplateShrinkRequest extends $tea.Model {
    applySceneContent?: string;
    intlType?: number;
    moreDataShrink?: string;
    ownerId?: number;
    relatedSignName?: string;
    remark?: string;
    resourceOwnerAccount?: string;
    resourceOwnerId?: number;
    templateCode?: string;
    templateContent?: string;
    templateName?: string;
    templateRule?: string;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSmsTemplateResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    orderId?: string;
    requestId?: string;
    templateCode?: string;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSmsTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateSmsTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShortUrlResponseBodyData extends $tea.Model {
    expireDate?: string;
    shortUrl?: string;
    sourceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSmsSignRequestSignFileList extends $tea.Model {
    fileContents?: string;
    fileSuffix?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckMobilesCardSupportResponseBodyDataQueryResult extends $tea.Model {
    mobile?: string;
    support?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckMobilesCardSupportResponseBodyData extends $tea.Model {
    queryResult?: CheckMobilesCardSupportResponseBodyDataQueryResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardSmsTemplateResponseBodyData extends $tea.Model {
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSmartShortUrlResponseBodyModel extends $tea.Model {
    domain?: string;
    expiration?: number;
    phoneNumber?: string;
    shortName?: string;
    shortUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardSmsLinkResponseBodyData extends $tea.Model {
    cardPhoneNumbers?: string;
    cardSignNames?: string;
    cardSmsLinks?: string;
    cardTmpState?: number;
    notMediaMobiles?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaResourceIdResponseBodyData extends $tea.Model {
    resUrlDownload?: string;
    resourceId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOSSInfoForCardTemplateResponseBodyData extends $tea.Model {
    accessKeyId?: string;
    aliUid?: string;
    bucket?: string;
    expireTime?: string;
    host?: string;
    policy?: string;
    signature?: string;
    startPath?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOSSInfoForUploadFileResponseBodyModel extends $tea.Model {
    accessKeyId?: string;
    expireTime?: string;
    host?: string;
    policy?: string;
    signature?: string;
    startPath?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsSignResponseBodyAuditInfo extends $tea.Model {
    auditDate?: string;
    rejectInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsTemplateResponseBodyAuditInfo extends $tea.Model {
    auditDate?: string;
    rejectInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsTemplateResponseBodyFileUrlList extends $tea.Model {
    fileUrl?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSmsTemplateResponseBodyMoreDataFileUrlList extends $tea.Model {
    moreDataFileUrl?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResourcesTagResource extends $tea.Model {
    resourceId?: string;
    resourceType?: string;
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResources extends $tea.Model {
    tagResource?: ListTagResourcesResponseBodyTagResourcesTagResource[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySmsSignRequestSignFileList extends $tea.Model {
    fileContents?: string;
    fileSuffix?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardSmsTemplateResponseBodyData extends $tea.Model {
    templates?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardSmsTemplateReportResponseBodyData extends $tea.Model {
    model?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMobilesCardSupportResponseBodyDataQueryResult extends $tea.Model {
    mobile?: string;
    support?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMobilesCardSupportResponseBodyData extends $tea.Model {
    queryResult?: QueryMobilesCardSupportResponseBodyDataQueryResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageSmartShortUrlLogResponseBodyModelList extends $tea.Model {
    clickState?: number;
    clickTime?: number;
    createTime?: number;
    phoneNumber?: string;
    shortName?: string;
    shortUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPageSmartShortUrlLogResponseBodyModel extends $tea.Model {
    list?: QueryPageSmartShortUrlLogResponseBodyModelList[];
    pageNo?: number;
    pageSize?: number;
    totalCount?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendDetailsResponseBodySmsSendDetailDTOsSmsSendDetailDTO extends $tea.Model {
    content?: string;
    errCode?: string;
    outId?: string;
    phoneNum?: string;
    receiveDate?: string;
    sendDate?: string;
    sendStatus?: number;
    templateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendDetailsResponseBodySmsSendDetailDTOs extends $tea.Model {
    smsSendDetailDTO?: QuerySendDetailsResponseBodySmsSendDetailDTOsSmsSendDetailDTO[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendStatisticsResponseBodyDataTargetList extends $tea.Model {
    noRespondedCount?: number;
    respondedFailCount?: number;
    respondedSuccessCount?: number;
    sendDate?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySendStatisticsResponseBodyData extends $tea.Model {
    targetList?: QuerySendStatisticsResponseBodyDataTargetList[];
    totalSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryShortUrlResponseBodyData extends $tea.Model {
    createDate?: string;
    expireDate?: string;
    pageViewCount?: string;
    shortUrl?: string;
    shortUrlName?: string;
    shortUrlStatus?: string;
    sourceUrl?: string;
    uniqueVisitorCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsSignListResponseBodySmsSignListReason extends $tea.Model {
    rejectDate?: string;
    rejectInfo?: string;
    rejectSubInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsSignListResponseBodySmsSignList extends $tea.Model {
    auditStatus?: string;
    businessType?: string;
    createDate?: string;
    orderId?: string;
    reason?: QuerySmsSignListResponseBodySmsSignListReason;
    signName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsTemplateListResponseBodySmsTemplateListReason extends $tea.Model {
    rejectDate?: string;
    rejectInfo?: string;
    rejectSubInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySmsTemplateListResponseBodySmsTemplateList extends $tea.Model {
    auditStatus?: string;
    createDate?: string;
    orderId?: string;
    outerTemplateType?: number;
    reason?: QuerySmsTemplateListResponseBodySmsTemplateListReason;
    templateCode?: string;
    templateContent?: string;
    templateName?: string;
    templateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBatchCardSmsResponseBodyData extends $tea.Model {
    bizCardId?: string;
    bizDigitalId?: string;
    bizSmsId?: string;
    cardTmpState?: number;
    mediaMobiles?: string;
    notMediaMobiles?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardSmsRequestCardObjects extends $tea.Model {
    customUrl?: string;
    dyncParams?: string;
    mobile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardSmsResponseBodyData extends $tea.Model {
    bizCardId?: string;
    bizDigitalId?: string;
    bizSmsId?: string;
    cardTmpState?: number;
    mediaMobiles?: string;
    notMediaMobiles?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequestTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    /**
     * @summary Creates a short URL.
     *
     * @description *   Before you call this operation, you must register the primary domain name of the source URL in the Short Message Service (SMS) console. After the domain name is registered, you can call this operation to create a short URL. For more information, see [Domain name registration](https://help.aliyun.com/document_detail/302325.html#title-mau-zdh-hd0).
     * *   You can create up to 3,000 short URLs within a natural day.
     * *   After a short URL is generated, a security review is required. Generally, the review takes 10 minutes to 2 hours to complete. Before the security review is passed, the short URL cannot be directly accessed.
     *
     * @param request AddShortUrlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddShortUrlResponse
     */
    addShortUrlWithOptions(request: AddShortUrlRequest, runtime: $Util.RuntimeOptions): Promise<AddShortUrlResponse>;
    /**
     * @summary Creates a short URL.
     *
     * @description *   Before you call this operation, you must register the primary domain name of the source URL in the Short Message Service (SMS) console. After the domain name is registered, you can call this operation to create a short URL. For more information, see [Domain name registration](https://help.aliyun.com/document_detail/302325.html#title-mau-zdh-hd0).
     * *   You can create up to 3,000 short URLs within a natural day.
     * *   After a short URL is generated, a security review is required. Generally, the review takes 10 minutes to 2 hours to complete. Before the security review is passed, the short URL cannot be directly accessed.
     *
     * @param request AddShortUrlRequest
     * @return AddShortUrlResponse
     */
    addShortUrl(request: AddShortUrlRequest): Promise<AddShortUrlResponse>;
    /**
     * @summary Creates a signature.
     *
     * @description You can call the AddSmsSign operation or use the [Short Message Service (SMS) console](https://dysms.console.aliyun.com/dysms.htm#/overview) to create an SMS signature. The signature must comply with the [SMS signature specifications](https://help.aliyun.com/document_detail/108076.html). You can call the QuerySmsSign operation or use the SMS console to query the review status of the signature.
     * For more information, see [Usage notes](https://help.aliyun.com/document_detail/55324.html).
     * ### QPS limit
     * You can call this operation only once per second. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     * >
     * *   You cannot cancel the review of a signature.
     * *   Individual users can create only one verification code signature, and can create only one general-purpose signature within a natural day. If you need to apply for multiple signatures, we recommend that you upgrade your account to an enterprise user.
     * *   If you need to use the same signature for messages sent to recipients both in and outside the Chinese mainland, the signature must be a general-purpose signature.
     * *   If you apply for a signature or message template, you must specify the signature scenario or template type. You must also provide the information of your services, such as a website URL, a domain name with an ICP filing, an application download URL, or the name of your WeChat official account or mini program. For sign-in scenarios, you must also provide an account and password for tests. A detailed description can improve the review efficiency of signatures and templates.
     * *   An SMS signature must undergo a thorough review process before it can be approved for use.
     *
     * @param request AddSmsSignRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddSmsSignResponse
     */
    addSmsSignWithOptions(request: AddSmsSignRequest, runtime: $Util.RuntimeOptions): Promise<AddSmsSignResponse>;
    /**
     * @summary Creates a signature.
     *
     * @description You can call the AddSmsSign operation or use the [Short Message Service (SMS) console](https://dysms.console.aliyun.com/dysms.htm#/overview) to create an SMS signature. The signature must comply with the [SMS signature specifications](https://help.aliyun.com/document_detail/108076.html). You can call the QuerySmsSign operation or use the SMS console to query the review status of the signature.
     * For more information, see [Usage notes](https://help.aliyun.com/document_detail/55324.html).
     * ### QPS limit
     * You can call this operation only once per second. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     * >
     * *   You cannot cancel the review of a signature.
     * *   Individual users can create only one verification code signature, and can create only one general-purpose signature within a natural day. If you need to apply for multiple signatures, we recommend that you upgrade your account to an enterprise user.
     * *   If you need to use the same signature for messages sent to recipients both in and outside the Chinese mainland, the signature must be a general-purpose signature.
     * *   If you apply for a signature or message template, you must specify the signature scenario or template type. You must also provide the information of your services, such as a website URL, a domain name with an ICP filing, an application download URL, or the name of your WeChat official account or mini program. For sign-in scenarios, you must also provide an account and password for tests. A detailed description can improve the review efficiency of signatures and templates.
     * *   An SMS signature must undergo a thorough review process before it can be approved for use.
     *
     * @param request AddSmsSignRequest
     * @return AddSmsSignResponse
     */
    addSmsSign(request: AddSmsSignRequest): Promise<AddSmsSignResponse>;
    /**
     * @summary Creates a message template.
     *
     * @description You can call the operation or use the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview) to apply for a message template. The template must comply with the [message template specifications](https://help.aliyun.com/document_detail/108253.html). You can call the [QuerySmsTemplate](https://help.aliyun.com/document_detail/419289.html) operation or use the Alibaba Cloud SMS console to check whether the message template is approved.
     * >
     * *   Message templates pending approval can be withdrawn. You can withdraw a message template pending approval on the Message Templates tab in the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview).
     * *   Message templates that have been approved can be deleted, and cannot be modified. You can delete a message template pending approval on the Message Templates tab in the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview).
     * *   If you call the AddSmsTemplate operation, you can apply for a maximum of 100 message templates in a calendar day. After you apply for a message template, we recommend that you wait for at least 30 seconds before you apply for another one. If you use the Alibaba Cloud SMS console, you can apply for an unlimited number of message templates.
     * *   Messages sent to the Chinese mainland and messages sent to countries or regions outside the Chinese mainland use separate message templates. Create message templates based on your needs.
     * *   If you apply for a signature or message template, you must specify the signature scenario or template type. You must also provide the information of your services, such as a website URL, a domain name with an ICP filing, an application download URL, or the name of your WeChat official account or mini program. For sign-in scenarios, you must also provide an account and password for tests. A detailed description can improve the review efficiency of signatures and templates.
     * *   A signature must undergo a thorough review process before it can be approved for use. For more information, see [Usage notes](https://help.aliyun.com/document_detail/55324.html).
     * ### QPS limits
     * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request AddSmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddSmsTemplateResponse
     */
    addSmsTemplateWithOptions(request: AddSmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<AddSmsTemplateResponse>;
    /**
     * @summary Creates a message template.
     *
     * @description You can call the operation or use the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview) to apply for a message template. The template must comply with the [message template specifications](https://help.aliyun.com/document_detail/108253.html). You can call the [QuerySmsTemplate](https://help.aliyun.com/document_detail/419289.html) operation or use the Alibaba Cloud SMS console to check whether the message template is approved.
     * >
     * *   Message templates pending approval can be withdrawn. You can withdraw a message template pending approval on the Message Templates tab in the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview).
     * *   Message templates that have been approved can be deleted, and cannot be modified. You can delete a message template pending approval on the Message Templates tab in the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview).
     * *   If you call the AddSmsTemplate operation, you can apply for a maximum of 100 message templates in a calendar day. After you apply for a message template, we recommend that you wait for at least 30 seconds before you apply for another one. If you use the Alibaba Cloud SMS console, you can apply for an unlimited number of message templates.
     * *   Messages sent to the Chinese mainland and messages sent to countries or regions outside the Chinese mainland use separate message templates. Create message templates based on your needs.
     * *   If you apply for a signature or message template, you must specify the signature scenario or template type. You must also provide the information of your services, such as a website URL, a domain name with an ICP filing, an application download URL, or the name of your WeChat official account or mini program. For sign-in scenarios, you must also provide an account and password for tests. A detailed description can improve the review efficiency of signatures and templates.
     * *   A signature must undergo a thorough review process before it can be approved for use. For more information, see [Usage notes](https://help.aliyun.com/document_detail/55324.html).
     * ### QPS limits
     * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request AddSmsTemplateRequest
     * @return AddSmsTemplateResponse
     */
    addSmsTemplate(request: AddSmsTemplateRequest): Promise<AddSmsTemplateResponse>;
    /**
     * @summary Checks whether a mobile phone number can receive card messages.
     *
     * @description ### QPS limit
     * You can call this operation up to 2,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request CheckMobilesCardSupportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckMobilesCardSupportResponse
     */
    checkMobilesCardSupportWithOptions(request: CheckMobilesCardSupportRequest, runtime: $Util.RuntimeOptions): Promise<CheckMobilesCardSupportResponse>;
    /**
     * @summary Checks whether a mobile phone number can receive card messages.
     *
     * @description ### QPS limit
     * You can call this operation up to 2,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request CheckMobilesCardSupportRequest
     * @return CheckMobilesCardSupportResponse
     */
    checkMobilesCardSupport(request: CheckMobilesCardSupportRequest): Promise<CheckMobilesCardSupportResponse>;
    /**
     * @summary Sends conversion rate information to Alibaba Cloud SMS.
     *
     * @param request ConversionDataIntlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ConversionDataIntlResponse
     */
    conversionDataIntlWithOptions(request: ConversionDataIntlRequest, runtime: $Util.RuntimeOptions): Promise<ConversionDataIntlResponse>;
    /**
     * @summary Sends conversion rate information to Alibaba Cloud SMS.
     *
     * @param request ConversionDataIntlRequest
     * @return ConversionDataIntlResponse
     */
    conversionDataIntl(request: ConversionDataIntlRequest): Promise<ConversionDataIntlResponse>;
    /**
     * @summary Creates a card message template.
     *
     * @description *   The CreateCardSmsTemplate operation saves the card message template information, submits it to the mobile phone manufacturer for approval, and returns the message template ID.
     * *   If the type of the message template is not supported or events that are not supported by the mobile phone manufacturer are specified, the template is not submitted. For more information, see [Supported message templates](https://help.aliyun.com/document_detail/434611.html).
     * *   For information about sample card message templates, see [Sample card message templates](https://help.aliyun.com/document_detail/435361.html).
     * ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param tmpReq CreateCardSmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCardSmsTemplateResponse
     */
    createCardSmsTemplateWithOptions(tmpReq: CreateCardSmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<CreateCardSmsTemplateResponse>;
    /**
     * @summary Creates a card message template.
     *
     * @description *   The CreateCardSmsTemplate operation saves the card message template information, submits it to the mobile phone manufacturer for approval, and returns the message template ID.
     * *   If the type of the message template is not supported or events that are not supported by the mobile phone manufacturer are specified, the template is not submitted. For more information, see [Supported message templates](https://help.aliyun.com/document_detail/434611.html).
     * *   For information about sample card message templates, see [Sample card message templates](https://help.aliyun.com/document_detail/435361.html).
     * ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request CreateCardSmsTemplateRequest
     * @return CreateCardSmsTemplateResponse
     */
    createCardSmsTemplate(request: CreateCardSmsTemplateRequest): Promise<CreateCardSmsTemplateResponse>;
    /**
     * @summary 创建短链
     *
     * @param request CreateSmartShortUrlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSmartShortUrlResponse
     */
    createSmartShortUrlWithOptions(request: CreateSmartShortUrlRequest, runtime: $Util.RuntimeOptions): Promise<CreateSmartShortUrlResponse>;
    /**
     * @summary 创建短链
     *
     * @param request CreateSmartShortUrlRequest
     * @return CreateSmartShortUrlResponse
     */
    createSmartShortUrl(request: CreateSmartShortUrlRequest): Promise<CreateSmartShortUrlResponse>;
    /**
     * @summary 创建短信签名
     *
     * @param tmpReq CreateSmsSignRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSmsSignResponse
     */
    createSmsSignWithOptions(tmpReq: CreateSmsSignRequest, runtime: $Util.RuntimeOptions): Promise<CreateSmsSignResponse>;
    /**
     * @summary 创建短信签名
     *
     * @param request CreateSmsSignRequest
     * @return CreateSmsSignResponse
     */
    createSmsSign(request: CreateSmsSignRequest): Promise<CreateSmsSignResponse>;
    /**
     * @summary 创建短信模板
     *
     * @param tmpReq CreateSmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSmsTemplateResponse
     */
    createSmsTemplateWithOptions(tmpReq: CreateSmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<CreateSmsTemplateResponse>;
    /**
     * @summary 创建短信模板
     *
     * @param request CreateSmsTemplateRequest
     * @return CreateSmsTemplateResponse
     */
    createSmsTemplate(request: CreateSmsTemplateRequest): Promise<CreateSmsTemplateResponse>;
    /**
     * @summary Deletes a short URL. After you delete a short URL, it cannot be changed to its original state.
     *
     * @description ### QPS limits
     * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request DeleteShortUrlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteShortUrlResponse
     */
    deleteShortUrlWithOptions(request: DeleteShortUrlRequest, runtime: $Util.RuntimeOptions): Promise<DeleteShortUrlResponse>;
    /**
     * @summary Deletes a short URL. After you delete a short URL, it cannot be changed to its original state.
     *
     * @description ### QPS limits
     * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request DeleteShortUrlRequest
     * @return DeleteShortUrlResponse
     */
    deleteShortUrl(request: DeleteShortUrlRequest): Promise<DeleteShortUrlResponse>;
    /**
     * @summary Deletes a signature.
     *
     * @description *   You cannot delete a signature that has not been approved.
     * *   After you delete a signature, you cannot recover it. Proceed with caution.
     * ### QPS limits
     * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request DeleteSmsSignRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSmsSignResponse
     */
    deleteSmsSignWithOptions(request: DeleteSmsSignRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSmsSignResponse>;
    /**
     * @summary Deletes a signature.
     *
     * @description *   You cannot delete a signature that has not been approved.
     * *   After you delete a signature, you cannot recover it. Proceed with caution.
     * ### QPS limits
     * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request DeleteSmsSignRequest
     * @return DeleteSmsSignResponse
     */
    deleteSmsSign(request: DeleteSmsSignRequest): Promise<DeleteSmsSignResponse>;
    /**
     * @summary Deletes a message template.
     *
     * @description *   Message templates pending approval can be withdrawn. You can delete a message template pending approval on the Message Templates tab in the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview).
     * *   Message templates that have been approved can be deleted, and cannot be modified. You can delete a message template pending approval on the Message Templates tab in the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview).
     * *   You cannot recover deleted message templates. Proceed with caution.
     * ### QPS limits
     * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request DeleteSmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSmsTemplateResponse
     */
    deleteSmsTemplateWithOptions(request: DeleteSmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<DeleteSmsTemplateResponse>;
    /**
     * @summary Deletes a message template.
     *
     * @description *   Message templates pending approval can be withdrawn. You can delete a message template pending approval on the Message Templates tab in the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview).
     * *   Message templates that have been approved can be deleted, and cannot be modified. You can delete a message template pending approval on the Message Templates tab in the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview).
     * *   You cannot recover deleted message templates. Proceed with caution.
     * ### QPS limits
     * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request DeleteSmsTemplateRequest
     * @return DeleteSmsTemplateResponse
     */
    deleteSmsTemplate(request: DeleteSmsTemplateRequest): Promise<DeleteSmsTemplateResponse>;
    /**
     * @summary Queries the short URLs of a card messages template.
     *
     * @description ### QPS limit
     * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request GetCardSmsLinkRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCardSmsLinkResponse
     */
    getCardSmsLinkWithOptions(request: GetCardSmsLinkRequest, runtime: $Util.RuntimeOptions): Promise<GetCardSmsLinkResponse>;
    /**
     * @summary Queries the short URLs of a card messages template.
     *
     * @description ### QPS limit
     * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request GetCardSmsLinkRequest
     * @return GetCardSmsLinkResponse
     */
    getCardSmsLink(request: GetCardSmsLinkRequest): Promise<GetCardSmsLinkResponse>;
    /**
     * @summary Converts a resource uploaded to the specified Object Storage Service (OSS) bucket for unified management. Then, a resource ID is returned. You can manage the resource based on the ID.
     *
     * @description ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request GetMediaResourceIdRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMediaResourceIdResponse
     */
    getMediaResourceIdWithOptions(request: GetMediaResourceIdRequest, runtime: $Util.RuntimeOptions): Promise<GetMediaResourceIdResponse>;
    /**
     * @summary Converts a resource uploaded to the specified Object Storage Service (OSS) bucket for unified management. Then, a resource ID is returned. You can manage the resource based on the ID.
     *
     * @description ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request GetMediaResourceIdRequest
     * @return GetMediaResourceIdResponse
     */
    getMediaResourceId(request: GetMediaResourceIdRequest): Promise<GetMediaResourceIdResponse>;
    /**
     * @summary Queries the OSS configuration information about card messages.
     *
     * @description Resources such as images and videos used for card message templates can be uploaded to Object Storage Service (OSS) buckets for storage. For more information, see [Upload files to OSS](https://help.aliyun.com/document_detail/437303.html).
     * ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request GetOSSInfoForCardTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOSSInfoForCardTemplateResponse
     */
    getOSSInfoForCardTemplateWithOptions(runtime: $Util.RuntimeOptions): Promise<GetOSSInfoForCardTemplateResponse>;
    /**
     * @summary Queries the OSS configuration information about card messages.
     *
     * @description Resources such as images and videos used for card message templates can be uploaded to Object Storage Service (OSS) buckets for storage. For more information, see [Upload files to OSS](https://help.aliyun.com/document_detail/437303.html).
     * ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @return GetOSSInfoForCardTemplateResponse
     */
    getOSSInfoForCardTemplate(): Promise<GetOSSInfoForCardTemplateResponse>;
    /**
     * @summary 短信上传文件，获取授权信息
     *
     * @param request GetOSSInfoForUploadFileRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOSSInfoForUploadFileResponse
     */
    getOSSInfoForUploadFileWithOptions(request: GetOSSInfoForUploadFileRequest, runtime: $Util.RuntimeOptions): Promise<GetOSSInfoForUploadFileResponse>;
    /**
     * @summary 短信上传文件，获取授权信息
     *
     * @param request GetOSSInfoForUploadFileRequest
     * @return GetOSSInfoForUploadFileResponse
     */
    getOSSInfoForUploadFile(request: GetOSSInfoForUploadFileRequest): Promise<GetOSSInfoForUploadFileResponse>;
    /**
     * @summary 查询短信签名详情
     *
     * @param request GetSmsSignRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSmsSignResponse
     */
    getSmsSignWithOptions(request: GetSmsSignRequest, runtime: $Util.RuntimeOptions): Promise<GetSmsSignResponse>;
    /**
     * @summary 查询短信签名详情
     *
     * @param request GetSmsSignRequest
     * @return GetSmsSignResponse
     */
    getSmsSign(request: GetSmsSignRequest): Promise<GetSmsSignResponse>;
    /**
     * @summary 查询文本短信模板详情
     *
     * @param request GetSmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSmsTemplateResponse
     */
    getSmsTemplateWithOptions(request: GetSmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<GetSmsTemplateResponse>;
    /**
     * @summary 查询文本短信模板详情
     *
     * @param request GetSmsTemplateRequest
     * @return GetSmsTemplateResponse
     */
    getSmsTemplate(request: GetSmsTemplateRequest): Promise<GetSmsTemplateResponse>;
    /**
     * @summary Queries the tags of a message template.
     *
     * @description ### QPS limit
     * You can call this operation up to 50 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request ListTagResourcesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListTagResourcesResponse
     */
    listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<ListTagResourcesResponse>;
    /**
     * @summary Queries the tags of a message template.
     *
     * @description ### QPS limit
     * You can call this operation up to 50 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request ListTagResourcesRequest
     * @return ListTagResourcesResponse
     */
    listTagResources(request: ListTagResourcesRequest): Promise<ListTagResourcesResponse>;
    /**
     * @summary Modifies a rejected signature and submit it for approval. Signatures that are pending approval or have been approved cannot be modified.
     *
     * @description You can call the operation or use the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview) to modify an existing signature and submit the signature for approval. The signature must comply with the [signature specifications](https://help.aliyun.com/document_detail/108076.html).
     * For more information, see [Usage notes](https://help.aliyun.com/document_detail/55324.html).
     * ### QPS limits
     * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     * >
     * *   Signatures pending approval cannot be modified.
     * *   You cannot modify a signature after it is approved. If you no longer need the signature, you can delete it.
     * *   If you are an individual user, you cannot apply for a new signature on the same day that your signature is rejected or deleted. We recommend that you modify the rejected signature and submit it again.
     *
     * @param request ModifySmsSignRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySmsSignResponse
     */
    modifySmsSignWithOptions(request: ModifySmsSignRequest, runtime: $Util.RuntimeOptions): Promise<ModifySmsSignResponse>;
    /**
     * @summary Modifies a rejected signature and submit it for approval. Signatures that are pending approval or have been approved cannot be modified.
     *
     * @description You can call the operation or use the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm#/overview) to modify an existing signature and submit the signature for approval. The signature must comply with the [signature specifications](https://help.aliyun.com/document_detail/108076.html).
     * For more information, see [Usage notes](https://help.aliyun.com/document_detail/55324.html).
     * ### QPS limits
     * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     * >
     * *   Signatures pending approval cannot be modified.
     * *   You cannot modify a signature after it is approved. If you no longer need the signature, you can delete it.
     * *   If you are an individual user, you cannot apply for a new signature on the same day that your signature is rejected or deleted. We recommend that you modify the rejected signature and submit it again.
     *
     * @param request ModifySmsSignRequest
     * @return ModifySmsSignResponse
     */
    modifySmsSign(request: ModifySmsSignRequest): Promise<ModifySmsSignResponse>;
    /**
     * @summary Modifies the information of an unapproved message template and submits it for review again.
     *
     * @description After you apply for a message template, if the template fails to pass the review, you can call this operation to modify the template and submit the template again. You can call this operation to modify only a template for a specific message type.
     * The template content must comply with the [SMS template specifications](https://help.aliyun.com/document_detail/108253.html).
     * For more information, see [Usage notes](https://help.aliyun.com/document_detail/55324.html).
     * ### QPS limit
     * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request ModifySmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySmsTemplateResponse
     */
    modifySmsTemplateWithOptions(request: ModifySmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<ModifySmsTemplateResponse>;
    /**
     * @summary Modifies the information of an unapproved message template and submits it for review again.
     *
     * @description After you apply for a message template, if the template fails to pass the review, you can call this operation to modify the template and submit the template again. You can call this operation to modify only a template for a specific message type.
     * The template content must comply with the [SMS template specifications](https://help.aliyun.com/document_detail/108253.html).
     * For more information, see [Usage notes](https://help.aliyun.com/document_detail/55324.html).
     * ### QPS limit
     * You can call this operation up to 1,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request ModifySmsTemplateRequest
     * @return ModifySmsTemplateResponse
     */
    modifySmsTemplate(request: ModifySmsTemplateRequest): Promise<ModifySmsTemplateResponse>;
    /**
     * @summary Queries the review status of a message template.
     *
     * @description ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QueryCardSmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCardSmsTemplateResponse
     */
    queryCardSmsTemplateWithOptions(request: QueryCardSmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<QueryCardSmsTemplateResponse>;
    /**
     * @summary Queries the review status of a message template.
     *
     * @description ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QueryCardSmsTemplateRequest
     * @return QueryCardSmsTemplateResponse
     */
    queryCardSmsTemplate(request: QueryCardSmsTemplateRequest): Promise<QueryCardSmsTemplateResponse>;
    /**
     * @summary Queries sent card messages.
     *
     * @description ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QueryCardSmsTemplateReportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCardSmsTemplateReportResponse
     */
    queryCardSmsTemplateReportWithOptions(request: QueryCardSmsTemplateReportRequest, runtime: $Util.RuntimeOptions): Promise<QueryCardSmsTemplateReportResponse>;
    /**
     * @summary Queries sent card messages.
     *
     * @description ### QPS limit
     * You can call this operation up to 300 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QueryCardSmsTemplateReportRequest
     * @return QueryCardSmsTemplateReportResponse
     */
    queryCardSmsTemplateReport(request: QueryCardSmsTemplateReportRequest): Promise<QueryCardSmsTemplateReportResponse>;
    /**
     * @summary Checks whether a mobile phone number can receive card messages.
     *
     * @param tmpReq QueryMobilesCardSupportRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMobilesCardSupportResponse
     */
    queryMobilesCardSupportWithOptions(tmpReq: QueryMobilesCardSupportRequest, runtime: $Util.RuntimeOptions): Promise<QueryMobilesCardSupportResponse>;
    /**
     * @summary Checks whether a mobile phone number can receive card messages.
     *
     * @param request QueryMobilesCardSupportRequest
     * @return QueryMobilesCardSupportResponse
     */
    queryMobilesCardSupport(request: QueryMobilesCardSupportRequest): Promise<QueryMobilesCardSupportResponse>;
    /**
     * @summary 点击明细查询
     *
     * @param request QueryPageSmartShortUrlLogRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryPageSmartShortUrlLogResponse
     */
    queryPageSmartShortUrlLogWithOptions(request: QueryPageSmartShortUrlLogRequest, runtime: $Util.RuntimeOptions): Promise<QueryPageSmartShortUrlLogResponse>;
    /**
     * @summary 点击明细查询
     *
     * @param request QueryPageSmartShortUrlLogRequest
     * @return QueryPageSmartShortUrlLogResponse
     */
    queryPageSmartShortUrlLog(request: QueryPageSmartShortUrlLogRequest): Promise<QueryPageSmartShortUrlLogResponse>;
    /**
     * @summary Queries the information about a message.
     *
     * @param request QuerySendDetailsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySendDetailsResponse
     */
    querySendDetailsWithOptions(request: QuerySendDetailsRequest, runtime: $Util.RuntimeOptions): Promise<QuerySendDetailsResponse>;
    /**
     * @summary Queries the information about a message.
     *
     * @param request QuerySendDetailsRequest
     * @return QuerySendDetailsResponse
     */
    querySendDetails(request: QuerySendDetailsRequest): Promise<QuerySendDetailsResponse>;
    /**
     * @summary Queries message delivery details.
     *
     * @description You can call the operation to query message delivery details, including the number of delivered messages, the number of messages with delivery receipts, and the time that a message is sent. If a large number of messages are sent on the specified date, you can specify the number of items displayed on each page and the number of pages to view the details by page.
     * ### QPS limits
     * You can call this operation up to 20 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySendStatisticsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySendStatisticsResponse
     */
    querySendStatisticsWithOptions(request: QuerySendStatisticsRequest, runtime: $Util.RuntimeOptions): Promise<QuerySendStatisticsResponse>;
    /**
     * @summary Queries message delivery details.
     *
     * @description You can call the operation to query message delivery details, including the number of delivered messages, the number of messages with delivery receipts, and the time that a message is sent. If a large number of messages are sent on the specified date, you can specify the number of items displayed on each page and the number of pages to view the details by page.
     * ### QPS limits
     * You can call this operation up to 20 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySendStatisticsRequest
     * @return QuerySendStatisticsResponse
     */
    querySendStatistics(request: QuerySendStatisticsRequest): Promise<QuerySendStatisticsResponse>;
    /**
     * @summary Queries the status of a short URL.
     *
     * @description ### QPS limits
     * You can call this operation up to 20 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QueryShortUrlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryShortUrlResponse
     */
    queryShortUrlWithOptions(request: QueryShortUrlRequest, runtime: $Util.RuntimeOptions): Promise<QueryShortUrlResponse>;
    /**
     * @summary Queries the status of a short URL.
     *
     * @description ### QPS limits
     * You can call this operation up to 20 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QueryShortUrlRequest
     * @return QueryShortUrlResponse
     */
    queryShortUrl(request: QueryShortUrlRequest): Promise<QueryShortUrlResponse>;
    /**
     * @summary Queries the status of a signature.
     *
     * @description After you apply for an SMS signature, you can query its status by using the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm) or calling the operation. If the signature is rejected, you can modify the signature based on the reason why it is rejected.
     * ### QPS limits
     * You can call this API operation up to 500 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySmsSignRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySmsSignResponse
     */
    querySmsSignWithOptions(request: QuerySmsSignRequest, runtime: $Util.RuntimeOptions): Promise<QuerySmsSignResponse>;
    /**
     * @summary Queries the status of a signature.
     *
     * @description After you apply for an SMS signature, you can query its status by using the [Alibaba Cloud SMS console](https://dysms.console.aliyun.com/dysms.htm) or calling the operation. If the signature is rejected, you can modify the signature based on the reason why it is rejected.
     * ### QPS limits
     * You can call this API operation up to 500 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySmsSignRequest
     * @return QuerySmsSignResponse
     */
    querySmsSign(request: QuerySmsSignRequest): Promise<QuerySmsSignResponse>;
    /**
     * @summary Queries message signatures by page.
     *
     * @description You can call this operation to query the details of message signatures, including the name, creation time, and approval status of each signature. If a message template is rejected, the reason is returned. Modify the message signature based on the reason.
     * ### QPS limit
     * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySmsSignListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySmsSignListResponse
     */
    querySmsSignListWithOptions(request: QuerySmsSignListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySmsSignListResponse>;
    /**
     * @summary Queries message signatures by page.
     *
     * @description You can call this operation to query the details of message signatures, including the name, creation time, and approval status of each signature. If a message template is rejected, the reason is returned. Modify the message signature based on the reason.
     * ### QPS limit
     * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySmsSignListRequest
     * @return QuerySmsSignListResponse
     */
    querySmsSignList(request: QuerySmsSignListRequest): Promise<QuerySmsSignListResponse>;
    /**
     * @summary Queries the approval status of a message template.
     *
     * @description After you create a message template, you can call this operation to query the approval status of the template. If a message template is rejected, the reason is returned. Modify the message template based on the reason.
     * ### QPS limit
     * You can call this operation up to 5,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySmsTemplateResponse
     */
    querySmsTemplateWithOptions(request: QuerySmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<QuerySmsTemplateResponse>;
    /**
     * @summary Queries the approval status of a message template.
     *
     * @description After you create a message template, you can call this operation to query the approval status of the template. If a message template is rejected, the reason is returned. Modify the message template based on the reason.
     * ### QPS limit
     * You can call this operation up to 5,000 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySmsTemplateRequest
     * @return QuerySmsTemplateResponse
     */
    querySmsTemplate(request: QuerySmsTemplateRequest): Promise<QuerySmsTemplateResponse>;
    /**
     * @summary Queries message templates.
     *
     * @description You can call this operation to query the details of message templates, including the name, creation time, and approval status of each template. If a message template is rejected, the reason is returned. Modify the message template based on the reason.
     * ### QPS limit
     * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySmsTemplateListRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySmsTemplateListResponse
     */
    querySmsTemplateListWithOptions(request: QuerySmsTemplateListRequest, runtime: $Util.RuntimeOptions): Promise<QuerySmsTemplateListResponse>;
    /**
     * @summary Queries message templates.
     *
     * @description You can call this operation to query the details of message templates, including the name, creation time, and approval status of each template. If a message template is rejected, the reason is returned. Modify the message template based on the reason.
     * ### QPS limit
     * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request QuerySmsTemplateListRequest
     * @return QuerySmsTemplateListResponse
     */
    querySmsTemplateList(request: QuerySmsTemplateListRequest): Promise<QuerySmsTemplateListResponse>;
    /**
     * @summary Sends multiple card messages at a time.
     *
     * @description You can call the operation to send multiple card messages to a maximum of mobile phone numbers at a time. Different signatures and rollback settings can be specified for the mobile phone numbers.
     * ### QPS limit
     * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request SendBatchCardSmsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendBatchCardSmsResponse
     */
    sendBatchCardSmsWithOptions(request: SendBatchCardSmsRequest, runtime: $Util.RuntimeOptions): Promise<SendBatchCardSmsResponse>;
    /**
     * @summary Sends multiple card messages at a time.
     *
     * @description You can call the operation to send multiple card messages to a maximum of mobile phone numbers at a time. Different signatures and rollback settings can be specified for the mobile phone numbers.
     * ### QPS limit
     * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request SendBatchCardSmsRequest
     * @return SendBatchCardSmsResponse
     */
    sendBatchCardSms(request: SendBatchCardSmsRequest): Promise<SendBatchCardSmsResponse>;
    /**
     * @summary Uses a single message template and multiple signatures to send messages to multiple recipients.
     *
     * @description You can call the operation to send messages to a maximum of 100 recipients at a time.
     *
     * @param request SendBatchSmsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendBatchSmsResponse
     */
    sendBatchSmsWithOptions(request: SendBatchSmsRequest, runtime: $Util.RuntimeOptions): Promise<SendBatchSmsResponse>;
    /**
     * @summary Uses a single message template and multiple signatures to send messages to multiple recipients.
     *
     * @description You can call the operation to send messages to a maximum of 100 recipients at a time.
     *
     * @param request SendBatchSmsRequest
     * @return SendBatchSmsResponse
     */
    sendBatchSms(request: SendBatchSmsRequest): Promise<SendBatchSmsResponse>;
    /**
     * @summary Sends a card message.
     *
     * @description *   Make sure that the message template that you want to use has been approved. If the mobile phone number of a recipient does not support card messages, the SendCardSms operation allows the rollback feature to ensure successful delivery.
     * *   When you call the SendCardSms operation to send card messages, the operation checks whether the mobile phone numbers of the recipients support card messages. If the mobile phone numbers do not support card messages, you can specify whether to enable rollback. Otherwise, the card message cannot be delivered.
     * ### QPS limit
     * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request SendCardSmsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendCardSmsResponse
     */
    sendCardSmsWithOptions(request: SendCardSmsRequest, runtime: $Util.RuntimeOptions): Promise<SendCardSmsResponse>;
    /**
     * @summary Sends a card message.
     *
     * @description *   Make sure that the message template that you want to use has been approved. If the mobile phone number of a recipient does not support card messages, the SendCardSms operation allows the rollback feature to ensure successful delivery.
     * *   When you call the SendCardSms operation to send card messages, the operation checks whether the mobile phone numbers of the recipients support card messages. If the mobile phone numbers do not support card messages, you can specify whether to enable rollback. Otherwise, the card message cannot be delivered.
     * ### QPS limit
     * You can call this operation up to 1,000 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request SendCardSmsRequest
     * @return SendCardSmsResponse
     */
    sendCardSms(request: SendCardSmsRequest): Promise<SendCardSmsResponse>;
    /**
     * @summary Sends a message. Before you call this operation, submit a message signature and message template, and make sure that the signature and template are approved.
     *
     * @description *   This operation is mainly used to send a single message. In special scenarios, you can send multiple messages with the same content to a maximum of 1,000 mobile numbers. Note that group sending may be delayed.
     * *   To send messages with different signatures and template content to multiple mobile numbers in a single request, call the [SendBatchSms](https://help.aliyun.com/document_detail/102364.html) operation.
     * *   You are charged for using Alibaba Cloud Short Message Service (SMS) based on the amount of messages sent. For more information, see [Pricing](https://www.aliyun.com/price/product#/sms/detail).
     * *   If your verification code signature and general-purpose signature have the same name, the system uses the general-purpose signature to send messages by default.
     *
     * @param request SendSmsRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendSmsResponse
     */
    sendSmsWithOptions(request: SendSmsRequest, runtime: $Util.RuntimeOptions): Promise<SendSmsResponse>;
    /**
     * @summary Sends a message. Before you call this operation, submit a message signature and message template, and make sure that the signature and template are approved.
     *
     * @description *   This operation is mainly used to send a single message. In special scenarios, you can send multiple messages with the same content to a maximum of 1,000 mobile numbers. Note that group sending may be delayed.
     * *   To send messages with different signatures and template content to multiple mobile numbers in a single request, call the [SendBatchSms](https://help.aliyun.com/document_detail/102364.html) operation.
     * *   You are charged for using Alibaba Cloud Short Message Service (SMS) based on the amount of messages sent. For more information, see [Pricing](https://www.aliyun.com/price/product#/sms/detail).
     * *   If your verification code signature and general-purpose signature have the same name, the system uses the general-purpose signature to send messages by default.
     *
     * @param request SendSmsRequest
     * @return SendSmsResponse
     */
    sendSms(request: SendSmsRequest): Promise<SendSmsResponse>;
    /**
     * @summary Reports the status of an OTP message to Alibaba Cloud SMS.
     *
     * @description Metrics:
     * *   Requested OTP messages
     * *   Verified OTP messages
     * An OTP conversion rate is calculated based on the following formula: OTP conversion rate = Number of verified OTP messages/Number of requested OTP messages.
     * > If you call the SmsConversion operation to query OTP conversion rates, your business may be affected. We recommend that you perform the following operations: 1. Call the SmsConversion operation in an asynchronous manner by configuring queues or events. 2. Manually degrade your services or use a circuit breaker to automatically degrade services.
     *
     * @param request SmsConversionIntlRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return SmsConversionIntlResponse
     */
    smsConversionIntlWithOptions(request: SmsConversionIntlRequest, runtime: $Util.RuntimeOptions): Promise<SmsConversionIntlResponse>;
    /**
     * @summary Reports the status of an OTP message to Alibaba Cloud SMS.
     *
     * @description Metrics:
     * *   Requested OTP messages
     * *   Verified OTP messages
     * An OTP conversion rate is calculated based on the following formula: OTP conversion rate = Number of verified OTP messages/Number of requested OTP messages.
     * > If you call the SmsConversion operation to query OTP conversion rates, your business may be affected. We recommend that you perform the following operations: 1. Call the SmsConversion operation in an asynchronous manner by configuring queues or events. 2. Manually degrade your services or use a circuit breaker to automatically degrade services.
     *
     * @param request SmsConversionIntlRequest
     * @return SmsConversionIntlResponse
     */
    smsConversionIntl(request: SmsConversionIntlRequest): Promise<SmsConversionIntlResponse>;
    /**
     * @summary Attaches tags to a message template.
     *
     * @description ### QPS limit
     * You can call this operation up to 50 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request TagResourcesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return TagResourcesResponse
     */
    tagResourcesWithOptions(request: TagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<TagResourcesResponse>;
    /**
     * @summary Attaches tags to a message template.
     *
     * @description ### QPS limit
     * You can call this operation up to 50 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
     *
     * @param request TagResourcesRequest
     * @return TagResourcesResponse
     */
    tagResources(request: TagResourcesRequest): Promise<TagResourcesResponse>;
    /**
     * @param request UntagResourcesRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UntagResourcesResponse
     */
    untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $Util.RuntimeOptions): Promise<UntagResourcesResponse>;
    /**
     * @param request UntagResourcesRequest
     * @return UntagResourcesResponse
     */
    untagResources(request: UntagResourcesRequest): Promise<UntagResourcesResponse>;
    /**
     * @summary 修改文本短信签名
     *
     * @param tmpReq UpdateSmsSignRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateSmsSignResponse
     */
    updateSmsSignWithOptions(tmpReq: UpdateSmsSignRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSmsSignResponse>;
    /**
     * @summary 修改文本短信签名
     *
     * @param request UpdateSmsSignRequest
     * @return UpdateSmsSignResponse
     */
    updateSmsSign(request: UpdateSmsSignRequest): Promise<UpdateSmsSignResponse>;
    /**
     * @summary 修改文本短信模板
     *
     * @param tmpReq UpdateSmsTemplateRequest
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateSmsTemplateResponse
     */
    updateSmsTemplateWithOptions(tmpReq: UpdateSmsTemplateRequest, runtime: $Util.RuntimeOptions): Promise<UpdateSmsTemplateResponse>;
    /**
     * @summary 修改文本短信模板
     *
     * @param request UpdateSmsTemplateRequest
     * @return UpdateSmsTemplateResponse
     */
    updateSmsTemplate(request: UpdateSmsTemplateRequest): Promise<UpdateSmsTemplateResponse>;
}
